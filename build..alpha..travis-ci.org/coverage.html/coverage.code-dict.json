{"/home/travis/build/npmtest/node-npmtest-multilevel/test.js":"/* istanbul instrument in package npmtest_multilevel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multilevel/lib.npmtest_multilevel.js":"/* istanbul instrument in package npmtest_multilevel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_multilevel = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_multilevel = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-multilevel/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-multilevel && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_multilevel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_multilevel\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_multilevel.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_multilevel.rollup.js'] =\n            local.assetsDict['/assets.npmtest_multilevel.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_multilevel.__dirname + '/lib.npmtest_multilevel.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multilevel/node_modules/multilevel/index.js":"var MuxDemux = require('mux-demux/jsonb');\n\nmodule.exports = {\n  client: require('./lib/client')(MuxDemux),\n  server: require('./lib/server')(MuxDemux),\n  writeManifest: require('./lib/write-manifest')\n};\n","/home/travis/build/npmtest/node-npmtest-multilevel/node_modules/multilevel/lib/client.js":"var rpc = require('rpc-stream');\nvar Emitter = require('events').EventEmitter;\nvar duplexer = require('duplexer');\nvar manifest = require('level-manifest');\nvar combine = require('stream-combiner');\nvar inherits = require('util').inherits;\nvar tmpStream = require('tmp-stream');\n\nmodule.exports = function (MuxDemux) {\n\nfunction Db (m) {\n  if (!(this instanceof Db)) return new Db(m);\n  if (!m) m = manifest({ methods: {} });\n  Emitter.call(this);\n\n  this.isClient = true;\n  this._isOpen = false;\n  this.methods = m.methods;\n\n  this.mdm = null;\n  this.client = null;\n  var self = this;\n\n  this._buildAll(m, this, [], null);\n  this.on('pipe', deprecated);\n}\n\ninherits(Db, Emitter);\n\nDb.prototype.sublevel = function (name) {\n  if (!this.sublevels || !this.sublevels[name]) {\n    throw new Error('client cannot create new sublevels');\n  }\n  return this.sublevels[name];\n};\n\nDb.prototype.prefix = function (key) {\n  return this._prefix.slice()\n};\n\nDb.prototype.createRpcStream = function () {\n  var self = this;\n  self._isOpen = true;\n\n  var mdm = self.mdm = MuxDemux({ error: true });\n  mdm.on('end', function () {\n    self._isOpen = false;\n    self.emit('close');\n  });\n\n  var client = self.client = rpc(null, { raw: true });\n  var rpcStream = mdm.createStream('rpc');\n  rpcStream.on('error', function () {});\n  client.pipe(rpcStream).pipe(client);\n\n  setTimeout(function () {\n    self.emit('open');\n  });\n\n  return mdm;\n};\n\nDb.prototype.close = function (cb) {\n  this._isOpen = false;\n  if (this.mdm) this.mdm.end();\n  if (cb) process.nextTick(cb);\n};\n\nDb.prototype.destroy = function () {\n  if (this.mdm) this.mdm.close();\n};\n\nDb.prototype.auth = function () {\n  var args = [].slice.call(arguments);\n  var cb = typeof args[args.length - 1] == 'function'\n    ? args.pop()\n    : function () {};\n  this.client.rpc('auth', args, cb);\n};\n\nDb.prototype.deauth = function () {\n  var args = [].slice.call(arguments);\n  var cb = typeof args[args.length - 1] == 'function'\n    ? args.pop()\n    : function () {};\n  this.client.rpc('deauth', args, cb);\n};\n\n// EventEmitter special casing, to prevent\n// users from listening to db events\n// like \"put\", although they are not supported\n\nvar on = Db.prototype.on;\nvar allowed = [\n  'error',\n  'pipe',\n  'open',\n  'close'\n];\n\nDb.prototype.addEventListener =\nDb.prototype.on = function(ev, fn){\n  if (allowed.indexOf(ev) == -1) throw new Error('not supported');\n  return on.call(this, ev, fn);\n};\n\nDb.prototype.pipe = deprecated;\n\nfunction deprecated () {\n  throw new Error(\n    'The API changed. Use db.createRpcStream().'\n  );\n}\n\n\nDb.prototype._buildAll = function (_db, db, path, parent) {\n  var self = this;\n  var m = manifest(_db);\n\n  for (var k in m.methods) {\n    var method = m.methods[k];\n    var type = method.type;\n    var name = path.concat(k).join('!');\n\n    if (type == 'error') throw new Error(method.message || 'not supported');\n\n    if (/async|sync/.test(type)) {\n      self._asyncSync(db, k, name);\n    } else if (/readable|writable|duplex/.test(type)) {\n      self._stream(db, k, name, type);\n    } else if (type == 'object') {\n      db[k] = new Emitter;\n      self._buildAll(method, db[k], path.concat('.' + k));\n    }\n  }\n\n  db._prefix = path;\n  db._parent = parent;\n\n  for (var name in _db.sublevels) {\n    var sublevel = _db.sublevels[name];\n    db.sublevels = db.sublevels || {};\n    db.sublevels[name] = new Db(sublevel);\n    self._buildAll(sublevel, db.sublevels[name], path.concat(name), db);\n  }\n};\n\nDb.prototype._asyncSync = function (db, k, name) {\n  var self = this;\n\n  db[k] = function () {\n    var args = [].slice.call(arguments);\n    var cb = typeof args[args.length - 1] == 'function'\n      ? args.pop()\n      : null;\n\n    if (/is(Open|Closed)/.test(k) && !cb) {\n      if (k == 'isOpen') return self._isOpen;\n      else return !self._isOpen;\n    }\n\n    if (!cb) cb = function (err) {\n      if (err) db.emit('error', err)\n    };\n\n    self._queue(function () {\n      self.client.rpc(name, args, cb);\n    });\n  };\n};\n\nDb.prototype._stream = function (db, k, name, type) {\n  var self = this;\n\n  db[k] = function () {\n    var args = [].slice.call(arguments);\n    args.unshift(name);\n\n    var tmp = tmpStream();\n\n    self._queue(function () {\n      var mdm = self.mdm;\n      var ts = (\n          type === 'readable'\n        ? mdm.createReadStream(args)\n        : type == 'writable'\n        ? mdm.createWriteStream(args)\n        : type == 'duplex'\n        ? mdm.createStream(args)\n        : (function () { throw new Error('not supported') })()\n      );\n      ts.autoDestroy = false;\n      tmp.replace(ts);\n    });\n\n    return tmp;\n  };\n};\n\nDb.prototype._queue = function (fn) {\n  if (this._isOpen) fn();\n  else this.once('open', fn);\n};\n\nreturn Db;\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-multilevel/node_modules/multilevel/lib/server.js":"var rpc = require('rpc-stream');\nvar manifest = require('level-manifest');\n\nmodule.exports = function (MuxDemux) {\n\nreturn function (db, opts) {\n  if (typeof db == 'string') throw new Error('database instance required');\n\n  if('function' === typeof db.sublevel) {\n    if(!(db.version >= '6'))\n      throw new Error('expected a level-sublevel@6 or greater')\n  }\n\n  var mdm = MuxDemux({ error: true });\n\n  opts = opts || {};\n\n  var deauth = opts.deauth || function () {};\n  var auth = opts.auth || function () {\n    var cb = [].pop.call(arguments);\n    cb(null, true);\n  };\n  var access = opts.access || function () { return true };\n\n  var server = rpc(null, { raw: true, flattenError: flatten });\n  var handlers = {};\n\n  (function buildAll (db, path) {\n    var m = manifest(db);\n    for (var k in m.methods) (function (k) {\n      var name = path.concat(k).join('!');\n      var method = m.methods[k];\n\n      if (method.type == 'async') {\n        server.createLocalCall(name, function (args, cb) {\n          access(server.sessionData, db, k, args);\n          args.push(cb);\n          db[k].apply(db, args);\n        });\n      } else if (method.type == 'sync') {\n        server.createLocalCall(name, function (args, cb) {\n          access(server.sessionData, db, k, args);\n          var r;\n          try { r = db[k].apply(db, args) }\n          catch (err) { return cb(err) }\n          cb(null, r);\n        });\n      } else if (method.type == 'object') {\n        db[k].methods = method.methods;\n        buildAll(db[k], path.concat('.' + k));\n      } else {\n        handlers[name] = function (args) {\n          access(server.sessionData, db, k, args);\n          return db[k].apply(db, args);\n        };\n      }\n    })(k);\n\n    for(var name in db.sublevels) {\n      buildAll(db.sublevels[name], path.concat(name));\n    }\n  })(db, []);\n\n  server.createLocalCall('auth', function (args, cb) {\n    auth.apply(null, args.concat(function authCb (err, data) {\n      if (err) return cb(err);\n      server.sessionData = data;\n      cb(null, data);\n    }));\n  });\n\n  server.createLocalCall('deauth', function (args, cb) {\n    server.sessionData = null;\n    if (opts.deauth) opts.deauth.apply(null, args);\n    else cb();\n  });\n\n  mdm.on('connection', function (con) {\n    con.on('error', function () {});\n\n    if (con.meta == 'rpc') return con.pipe(server).pipe(con);\n\n    try {\n      var stream = handlers[con.meta[0]](con.meta.slice(1));\n      // prevent iterators from staying open when connection fails\n      con.once('error', function () {\n        var method = stream[stream.readable ? 'destroy' : 'end']\n        if(method) method.call(stream)\n      });\n      if (stream.readable) stream.pipe(con);\n      if (stream.writable) con.pipe(stream);\n      stream.on('error', function (err) {\n        con.error(flatten(err));\n      });\n    } catch (err) {\n      con.error(flatten(err));\n    }\n  });\n\n  return mdm;\n};\n\n};\n\nfunction flatten(err){\n  if(!(err instanceof Error)) return err;\n  var err2 = {\n    message: err.message,\n    type: err.type,\n    notFound: err.notFound,\n    status: err.status\n  };\n  for (var k in err) err2[k] = err[k];\n  return err2;\n}\n","/home/travis/build/npmtest/node-npmtest-multilevel/node_modules/multilevel/lib/write-manifest.js":"var fs = require('fs');\nvar createManifest = require('level-manifest');\n\nmodule.exports = writeManifest;\n\nfunction writeManifest (db, path) {\n  var manifest = createManifest(db);\n  fs.writeFileSync(path, JSON.stringify(manifest, null, 2));\n  return manifest;\n}\n","/home/travis/build/npmtest/node-npmtest-multilevel/node_modules/multilevel/msgpack.js":"var MuxDemux = require('mux-demux/msgpack');\n\nmodule.exports = {\n  client: require('./lib/client')(MuxDemux),\n  server: require('./lib/server')(MuxDemux),\n  writeManifest: require('./lib/write-manifest')\n};\n","/home/travis/build/npmtest/node-npmtest-multilevel/node_modules/multilevel/bench/client.js":"var multilevel = require('..');\nvar net = require('net');\n\nvar port = process.argv[2];\nvar num = Math.round(Number(process.argv[3]));\nvar str = process.argv[4];\n\nvar write = require('./write')(str);\n\nvar db = multilevel.client()\nvar stream = db.createRpcStream()\nvar con = net.connect(port)\nstream.pipe(con).pipe(stream)\n\nvar start = Date.now()\nwrite(db, num, function (err, results) {\n  console.log(Date.now() - start)\n  con.destroy();\n  process.exit(0);\n})  \n","/home/travis/build/npmtest/node-npmtest-multilevel/node_modules/multilevel/bench/write.js":"module.exports = function (str) {\n  return function write (dbs, num, cb) {\n    if (!Array.isArray(dbs)) dbs = [dbs];\n    var written = 0\n    var start = Date.now()\n\n    function rand () {\n      return dbs[Math.floor(Math.random() * dbs.length)]\n    }\n\n    for (var i = 0; i < num; i++) {\n      rand().put(''+i, str, function (err) {\n        if (err) {\n          var oldCb = cb\n          cb = function () {}\n          return oldCb(err)\n        }\n        if (++written == num) {\n          var duration = Date.now() - start\n          cb(\n            null,\n            duration + 'ms (' + (Math.round(num/duration*1000)) + ' ops/s)'\n          )\n        }\n      })\n    }\n  }\n};\n"}